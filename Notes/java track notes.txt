-> An Enterprise Application is a software application that helps enterprises in managing their business-related activities. They are large and complex and solve business-related problems to fulfill the needs of the enterprises.

Different layers of enterprise application :
Client Tier:
Acts as an interface to the end-user. 

Presentation Tier:
This tier links the business logic of the application and the end user. It also takes care of displaying dynamic content to the end-user and accepting various inputs from the user. spring rest can be a example of presentation tier.

Business Tier:
This tier represents the complete business logic and requirements of the application. All the main functionalities, like data validations and data manipulations lie in this tier of the application.

Persistence Tier:
This acts as a go-between for the business tier and the database. It gets the requirements from the business tier, and based on it accesses data from the database.

-> How java program works :
we have our source code i.e .java file -> it goes through java c.ompiler and a .class file is generated which is a byte code and this file is platform independent -> now control goes through JVM -> class loader loads all the class files needed for execution -> byte code verifier checks code for fragments for illegal code -> interpreter converts byte code instruction to machine code -> compiler compiles reusable byte code instruction to machine code -> the overall execution of the program is assisted by runtime

-> Advantages of Java :
Simple
Architecture netural : platform independent i.e program running on different platform without recompiling
OOP features
Multi threaded 
Robust : Strong memory management, don't use pointer thus eliminating security problems, garbage collection feature, exception handling and type checking support

-> Data types are of two types :
Primitive data types: Variables hold the value of data item. char in Java uses Unicode characters
Non-Primitive/Reference data types: Variables hold the reference of the memory location where the data item is stored.

-> Datatypes:
Primitive : Boolean   -> boolean
            Numerical -> Character [char]
                         Integral [byte, short, int, long]
                         Double [float, double]

Non-Primitive : String, User defined classes, enums

-> Type Casting :
There are two types of type casting in java :
Explicit typecasting : float totalCostWithDiscount = totalCost - (totalCost * (float)5/100);    // Explicit Type Casting
There is a possibility of data loss here, so we need to be careful while doing explicit, it is also called as narrowing conversion.

Implicit typecasting : Implicit conversion happens when a value of smaller data type needs to be used as a value of larger compatible data type. 
int intValue = 1002;
long longVariable = intValue;
//Here type casting is automatically done

-> Constructor
constructor is a special method same name as of class, which is used to initialize the object attributes. There are two types of it default or non parameterized constructor provided by compiler and the parameterized one created by us.
If we don't create any constructor compiler provides default one but if we create parameterized constructor then compiler doesn't provide default one.

-> "this" keyword
this keyword is used to call the class attributes when there is shadowing and it can also be used to call the other constructor from inside a constructor and other methods too. this is a reference of current object whose method or constructor is called.

-> There are two ways to create string variable :
using string literal : String x = "str"
using new keyword : String x = new String("str")
String is immutable in nature i.e we can't change them
for ex : 
x = x + "end" doing this does not change x, but it creates another string stores the answer in that with no reference

-> To tackle it we have StringBuilder class which is mutable in nature
StringBuilder x = new StringBuilder("x");
x.append("end");
now, x becomes xend

-> All this time, we have been using primitive types. But there are occasions where we need to represent them as Objects. This is where Wrapper classes come into the picture. A wrapper class is the one which contains or wraps the primitive data types (int, char, etc.)
All the primitive data types have their corresponding Wrapper classes. for ex : Integer for int
Automatic conversion of primitive type to wrapper type is called autoboxing and automatic conversion of wrapper to primitive type is unboxing.

-> There is another method other than norman one to create a array
// Another way of creating a 2-D array
String[][] names = new String[][] {
    {"Robert", "Shelly", "Scarlett"},
    {"Mark", "Oliver", "Chris"},
    {"Emmy", "Josh", "Merry"},
    {"Evelyn", "Austin", "Emma"}
};

-> We also have an Array class which provides many useful static methods to perform operations like sorting, searching and comparing etc
int resultIndex = Arrays.binarySearch(numArr, 40);
Arrays.sort(numArr);

-> Enum : enumerations are the group of named constants. The enum fields are implicity static and final and hence are are constant during compile time. Using enum we limit the selection of values within limited values
pulib enum Pizza {
LARGE, MEDIUM, SMALL
}

Enums are considered as reference types like classes and interface, therefore we can also create constructor, methods and variables inside them.
A static method called values() is automatically generated by the java compiler for each enum
We can loop through the enum and print constant values.

for loop-

		//values() method returns an array of all values inside enum
		//ordinal() method can be used to display values assigned to enum constants
		for (PizzaSize psize : PizzaSize.values()) {
			System.out.println(psize+" "+psize.ordinal());
		}

-> REGEX SKIPPED

->